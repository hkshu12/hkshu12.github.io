<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>好玩是不是好游戏的必备条件？</title>
      <link href="/2020/01/is-fun-a-prerequisite-for-a-good-game/"/>
      <url>/2020/01/is-fun-a-prerequisite-for-a-good-game/</url>
      
        <content type="html"><![CDATA[<p>考试周有一天复习完还早，就打开了机核的 Gadio 听听节目，发现有一期节目叫做<q>圆桌辩论：好玩，是不是一款好游戏的必须条件</q>。</p><p>这标题可太有意思了，看着就像是会让人打起来的题目，听下去发现内容也相当有意思，其中也不乏我自己有过的一些思考，所以今天就随便写写，来说说我的看法。</p><p>当然，接下来的内容充斥着我的主观想法。</p><a id="more"></a><p>来谈这个问题，不可避免的是对“好游戏”以及“好玩”的定义的探究。</p><p>毫无疑问，目前为止还没有对游戏的一套为大众认可的科学的评价方法与体系，按我的想法来说恐怕将来也不会有。也正因此，所有对游戏是好是坏的评判都是主观的。某款游戏可能有人弃之如敝履，也有人视之如珍馐，这也是大有可能的事。</p><p>此外，尽管节目中几位已经在尽量避免把自己所认为的“好游戏”中的属性加入到“好玩”的因素之中，但仍不时有这样的争论。如果我把所有我所认为的“好游戏”的特质都加入到“好玩”的定义当中，我就自然地立于不败之地了。</p><p>而节目到最后最根源也是最重要的问题出现了，<q>什么是游戏？</q>。谁来给游戏下定义呢？任天堂的那些“游戏”似乎比较符合我们对“游戏”的印象，如今的种种 3A 大作似乎也找不到它们不能被认作“游戏”的理由。那么，《看火人》呢？《超凡双生》《底特律：变人》呢？《隐形守护者》呢？它们的游戏身份越来越模糊，逐渐贴近如今的互动视频这一形式。</p><p>因此，如果对游戏的理解不同，单纯地讨论是不是“好游戏”、是不是“好玩”，这是毫无意义的。</p><p>如果将游戏限定为最古老的、最初的模样，那么显然，不好玩、不能给人带来快乐的游戏不是好游戏。然而游戏发展至今，已经从简单的取乐的手段演变为一种艺术形式。有人制作游戏本身的主要目的就只是为了传情达意、让人们共情、或是传达自己的思想。譬如《死亡搁浅》，这个游戏本身并没有太多乐子可言，小岛秀夫在“游戏”中（如果我们将其称之为游戏的话）更多地是想表达人与人之间的连接等。我没玩过，不敢多吹，但就其本身而言，相对于传统类型的游戏，它是一种与之不同的艺术形式和表现手段。这并不影响其成为一个发人深思的作品。在一种泛游戏的概念下，它理应是一个好游戏，尽管也许它并不怎么好玩。</p><p>不把游戏看作艺术的想法，我是不认同的。尽管我本身并不喜欢这种借游戏来讲故事的形式。</p><p>如果你想要讲故事，为什么不写本书呢？</p><p>这就是我的想法。</p><br><br><p><em>一点题外话：</em></p><p>四十二在节目中提到，玩育碧游戏的一年很痛苦。</p><p>不得不说育碧的开放世界确实很令人痛苦，《全境封锁 2》《孤岛惊魂》等全都是那一套解放据点、获得加成的玩法，每一款游戏的外表看起来都甚是不同，“香疯了”，仔细体验一下全都是核心玩法相同的换皮游戏。</p><p>我去年才通了《刺客信条：起源》。因为我喜欢清完所有任务，看见地图上有任务没接，我就难受。但是任务实在太无聊了，除了换皮还是换皮。做完任务还要刷等级，刷材料，我固然明白此举是为了让我能够更加融入游戏世界，但是还是太无聊了，我几乎玩不下去，最后叮到了满级直接把主线过了，DLC2 都没玩完就把游戏删了。（说实话 DLC2 的场景还是很震撼的）</p><p>后来我得了开放世界 PTSD，不想玩任何开放世界游戏。</p><p>《空洞骑士》我都玩不下去，因为地图太大，我找不到自己在地图中游荡的目标。我不会说这个游戏不是“好游戏”，也不会说它“不好玩”，我感觉到这是个好玩的游戏，只是我玩不下去罢了，或许哪天我看看攻略找到我要打的 boss 就把它给通咯。</p><p>我喜欢更线性一些的，有明确目标的游戏。</p><p>《蔚蓝》可以说是我去年下半年最喜欢的游戏。一开始接触到《蔚蓝》完全是因为看速通视频，单纯的流畅以及单纯的牛逼。尽管自己上手玩起来完全不像速通那样，但是舒服的操作手感（摇杆方向判定除外）、明确的目标以及奇低无比的试错代价让我喜欢上了这款游戏。毫无疑问，在我的定义中，《蔚蓝》是一款“好玩”的“好游戏”。</p><p>还有另一款我很喜欢的优秀游戏《BABA IS YOU》，全新类型的解谜游戏，通过修改游戏规则来达成目标，打破常规、令人惊叹的想法，真的很有意思。</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统问题归档</title>
      <link href="/2019/11/operating-system-question-list-2/"/>
      <url>/2019/11/operating-system-question-list-2/</url>
      
        <content type="html"><![CDATA[<p>操作系统部分问答题归档整理-Part 2</p><a id="more"></a><h2 id="1-解释中断向量"><a href="#1-解释中断向量" class="headerlink" title="1. 解释中断向量"></a>1. 解释中断向量</h2><ul><li>把中断/异常与相应的处理方法对应起来</li><li>每种中断都会对应一个中断向量号，而这个向量号通过IDT（中断向量表）就与相应的中断处理程序对应起来了。</li></ul><h2 id="2-解释中断类型码"><a href="#2-解释中断类型码" class="headerlink" title="2. 解释中断类型码"></a>2. 解释中断类型码</h2><p>把每个中断服务程序进行编号，这个号就代表一个中断服务程序，就是中断类型码。这个中断类型码是计算机用来查找中断向量用的。</p><h2 id="3-解释中断向量表"><a href="#3-解释中断向量表" class="headerlink" title="3. 解释中断向量表"></a>3. 解释中断向量表</h2><ul><li>中断向量表是指中断向量（中断服务程序入口地址的偏移量与段基值）构成的表，一个中断向量占据4字节空间。中断向量表是8086系统内存中最低端1K字节空间，它的作用就是按照中断类型号从小到大的顺序存储对应的中断向量，总共存储256个中断向量。</li><li>这个地址正好和中断类型码有一种对应的关系：中断类型码*4(一个中断向量所占的空间) 就等于这个中断向量的首地址。</li></ul><h2 id="4-实模式下中断程序地址如何得到"><a href="#4-实模式下中断程序地址如何得到" class="headerlink" title="4. 实模式下中断程序地址如何得到?"></a>4. 实模式下中断程序地址如何得到?</h2><p>根据中断类型码n，从中断向量表中取得中断处理程序地址，取得的段地址存入CS，偏移量存入IP。从而使CPU转入中断处理程序运行。</p><h2 id="5-保护模式下中断程序地址如何得到"><a href="#5-保护模式下中断程序地址如何得到" class="headerlink" title="5. 保护模式下中断程序地址如何得到?"></a>5. 保护模式下中断程序地址如何得到?</h2><ul><li>保护模式下的中断处理与实模式下的中断处理最大区别在于寻找中断处理代码入口的方式</li><li>在保护模式下，为每一个中断和异常定义了一个中断描述符，来说明中断和异常服务程序 的入口地址的属性</li><li>由中断描述符表取代实地址模式下的中断向量表</li></ul><ol><li>查中断描述符表，以IDTR指定的中断描述符表的基地址为起始地址，用调用号N×8算出偏移量，即为N号中断门描述符的首地址，由此处取出中断门的8个字节</li><li>中断描述符低地址的0和1两个字节是中断代码的偏移量A15～A0；高地址的6和7两个字节是中断代码的偏移量A31～A16；2和3两个字节是段选择符。查全局或局部描述符表根据中断门中的选择子（段选择符）和偏移量得到中断处理程序入口。</li></ol><h2 id="6-中断向量的地址如何得到"><a href="#6-中断向量的地址如何得到" class="headerlink" title="6. 中断向量的地址如何得到?"></a>6. 中断向量的地址如何得到?</h2><p>中断类型码*4</p><h2 id="7-实模式下如何根据中断向量的地址得到中断程序地址"><a href="#7-实模式下如何根据中断向量的地址得到中断程序地址" class="headerlink" title="7. 实模式下如何根据中断向量的地址得到中断程序地址?"></a>7. 实模式下如何根据中断向量的地址得到中断程序地址?</h2><p>根据中断向量地址取得中断向量，低地址2个byte放偏移量，高地址2个byte放段描述符，根据描述符中基址加偏移量得到中断程序地址。</p><h2 id="8-解释中断描述符"><a href="#8-解释中断描述符" class="headerlink" title="8. 解释中断描述符"></a>8. 解释中断描述符</h2><ul><li>低地址的0和1两个字节是中断代码的偏移量A15～A0； 高地址的6和7两个字节是中断代码的偏移量A31～A16；</li><li>2和3两个字节是段选择符，段选择符和偏移量用来形成中断服务子程序的入口地址； </li><li>4和5两个字节称为访问权限字节，它标识该中断描述符是否有效、服务程序的特权级和描述符的类型等信息；  <ol><li>P（present）：表示中断描述符的有效性 </li><li>DPL（descriptor privilege level）</li><li>TYPE：指示中断描述符的不同类型</li></ol></li></ul><img src="/2019/11/operating-system-question-list-2/中断描述符.png" title="中断描述符"><h2 id="9-保护模式下中断描述符表如何得到"><a href="#9-保护模式下中断描述符表如何得到" class="headerlink" title="9. 保护模式下中断描述符表如何得到?"></a>9. 保护模式下中断描述符表如何得到?</h2><p>引入一个48位的全地址寄存器（即中断描述符表寄存器IDTR）存放IDT的内存地址，IDTR包含32位的基地址和16位段限，基地址定义中断描述符表IDT在存储器中的起始点，段限定义中断描述符表所占的字节个数</p><h2 id="10-保护模式下中断门如何得到"><a href="#10-保护模式下中断门如何得到" class="headerlink" title="10. 保护模式下中断门如何得到?"></a>10. 保护模式下中断门如何得到?</h2><p>查中断描述符表，以IDTR指定的中断描述符表的基地址为起始地址，用调用号N×8算出偏移量，即为N号中断门描述符的首地址，由此处取出中断门的8个字节</p><h2 id="11-保护模式下如何根据中断门得到中断处理程序地址"><a href="#11-保护模式下如何根据中断门得到中断处理程序地址" class="headerlink" title="11. 保护模式下如何根据中断门得到中断处理程序地址?"></a>11. 保护模式下如何根据中断门得到中断处理程序地址?</h2><p>中断描述符低地址的0和1两个字节是中断代码的偏移量A15～A0；高地址的6和7两个字节是中断代码的偏移量A31～A16；2和3两个字节是段选择符。查全局或局部描述符表根据中断门中的选择子（段选择符）和偏移量得到中断处理程序入口。</p><h2 id="12-中断的分类，举例不同类型的中断"><a href="#12-中断的分类，举例不同类型的中断" class="headerlink" title="12. 中断的分类，举例不同类型的中断?"></a>12. 中断的分类，举例不同类型的中断?</h2><ul><li>从中断源的角度分类<ol><li>由计算机硬件异常或故障引起的中断，也称为<strong>内部异常中断</strong>。</li><li>由程序中执行了中断指令引起的中断，也称为<strong>软中断</strong>。由程序员通过INT或INT3指令触发，通常当做trap处理，用处：实现系统调用。</li><li>外部设备（如输入输出设备）请求引起的中断，也称为<strong>外部中断或Ｉ/Ｏ中断</strong>。</li></ol></li><li>外部中断的分类<ol><li>可屏蔽中断：禁止响应某个中断，保证在执行一些重要的程序中不响应中断，以免造成迟缓而引起错误。</li><li>不可屏蔽中断：重新启动、电源故障、内存出错、总线出错等影响整个系统工作的中断是不能屏蔽的。</li></ol></li></ul><h2 id="13-中断与异常的区别"><a href="#13-中断与异常的区别" class="headerlink" title="13. 中断与异常的区别?"></a>13. 中断与异常的区别?</h2><p>中断：由CPU以外的事件引起的中断，如I/O中断、时钟中断、控制台中断等。 </p><p>异常：来自CPU的内部事件或程序执行中的事件引起的过程，如由于CPU本身故障、程序故障和请求系统服务的指令引起的中断等。   </p><h2 id="14-实模式和保护模式下的中断处理差别"><a href="#14-实模式和保护模式下的中断处理差别" class="headerlink" title="14. 实模式和保护模式下的中断处理差别"></a>14. 实模式和保护模式下的中断处理差别</h2><p>实模式下查中断向量表，保护模式下查中断描述符表</p><h2 id="15-如何识别键盘组合键-如-shift-a-是否还有其他解决方案"><a href="#15-如何识别键盘组合键-如-shift-a-是否还有其他解决方案" class="headerlink" title="15. 如何识别键盘组合键 (如 shift+a) 是否还有其他解决方案?"></a>15. 如何识别键盘组合键 (如 <code>shift+a</code>) 是否还有其他解决方案?</h2><p>《Orange’s》中的实现方案：声明变量<code>SHIFT</code>来记录<code>shift</code>键的状态，当其被按下时，变量值变为<code>TRUE</code>，释放时，变量值为<code>FALSE</code>。如果当<code>shift</code>键被按下还未释放时又按下<code>a</code>键，则<code>if(SHIFT)</code>成立，于是<code>column</code>值改变，<code>keyrow[column]</code>得到的值是<code>shift+a</code>对应的<code>A</code>。</p><h2 id="16-IDT-是什么，有什么作用"><a href="#16-IDT-是什么，有什么作用" class="headerlink" title="16. IDT 是什么，有什么作用?"></a>16. IDT 是什么，有什么作用?</h2><p>中断描述符表，根据中断类型码查找中断描述符，从而调用中断服务程序。</p><h2 id="17-IDT-中有几种描述符"><a href="#17-IDT-中有几种描述符" class="headerlink" title="17. IDT 中有几种描述符?"></a>17. IDT 中有几种描述符?</h2><p>3种，中断门、任务门和陷阱门。</p><h2 id="18-异常的分类"><a href="#18-异常的分类" class="headerlink" title="18. 异常的分类?"></a>18. 异常的分类?</h2><ul><li><p>Fault，是一种可被更正的异常，而且一旦被更正，程序可以不失连续性地继续执行。返回地址是产生fault的指令。</p></li><li><p>Trap，一种在发生trap的指令执行之后立即被报告的异常，它也允许程序或任务不失连续性地继续执行。返回地址是产生trap的指令之后的那条指令。</p></li><li><p>Abort，不总是报告精确异常发生位置的异常，不允许程序或任务继续执行，而是用来报告严重错误的。</p></li></ul><h2 id="19-用户态和内核态的特权级分别是多少"><a href="#19-用户态和内核态的特权级分别是多少" class="headerlink" title="19. 用户态和内核态的特权级分别是多少?"></a>19. 用户态和内核态的特权级分别是多少?</h2><p>用户态：3，内核态：0</p><h2 id="20-中断向量表中，每个中断有几个字节-里面的结构是什么"><a href="#20-中断向量表中，每个中断有几个字节-里面的结构是什么" class="headerlink" title="20. 中断向量表中，每个中断有几个字节? 里面的结构是什么?"></a>20. 中断向量表中，每个中断有几个字节? 里面的结构是什么?</h2><p>每个中断向量4个字节，低地址2个byte放偏移，高地址2个byte放段描述符。中断向量表起始地址于0地址，最多256个中断向量。</p><h2 id="21-中断异常共同点-至少两点-，不同点-至少三点"><a href="#21-中断异常共同点-至少两点-，不同点-至少三点" class="headerlink" title="21. 中断异常共同点 (至少两点)，不同点 (至少三点)"></a>21. 中断异常共同点 (至少两点)，不同点 (至少三点)</h2><p>共同点：</p><ol><li>都是程序执行过程中的强制性转移，转移到相应的处理程序。</li><li>都是软件或者硬件发生了某种情形而通知处理器的行为。</li></ol><p>不同点：</p><ol><li><p>中断，是CPU所具备的功能。通常因为“硬件”而随机发生。</p><p>异常，是“软件”运行过程中的一种开发过程中没有考虑到的程序错误。</p></li><li><p>中断是CPU暂停当前工作，有计划地去处理其他的事情。中断的发生一般是可以预知的，处理的过程也是事先制定好的。处理中断时程序是正常运行的。</p><p>异常是CPU遇到了无法响应的工作，而后进入一种非正常状态。异常的出现表明程序有缺陷。</p></li><li><p>中断是异步的，异常是同步的。</p><p>中断是来自处理器外部的I/O设备的信号的结果，它不是由指令流中某条指令执行引起的，从这个意义上讲，它是异步的，是来自指令流之外的。</p><p>异常是执行当前指令流中的某条指令的结果，是来自指令流内部的，从这个意义上讲它们都是同步的。</p></li><li><p>中断或异常的返回点</p><p>良性的如中断和trap，只是在正常的工作流之外执行额外的操作，然后继续干没干完的活。因此处理程序完了后返回到原指令流的下一条指令，继续执行。</p><p>恶性的如fault和abort，对于可修复fault，由于是在上一条指令执行过程中发生（是由正在执行的指令引发的）的，在修复fault之后，会重新执行该指令；至于不可修复fault或abort，则不会再返回。</p></li><li><p>中断是由于当前程序无关的中断信号触发的，CPU对中断的响应是被动的，且与CPU模式无关。既可以发生在用户态，又可以发生在核心态。</p><p>异常是由CPU控制单元产生的，大部分异常发生在用户态。</p></li></ol><h2 id="22-中断或异常发生时的堆栈变化？"><a href="#22-中断或异常发生时的堆栈变化？" class="headerlink" title="22. 中断或异常发生时的堆栈变化？"></a>22. 中断或异常发生时的堆栈变化？</h2><p>当从用户态堆栈切换到内核态堆栈时，先把用户态堆栈的值压入中断程序的内核态堆栈中，同时把 EFLAGS 寄存器自动压栈，然后把被中断进程的返回地址压入堆栈。如果异常产生了一个硬件错误码，则将它也保存在堆栈中。</p><p>现在 SS:ESP 的值从当前进程的TSS中获得，也就是获得当前进程的内核栈指针，因为此时中断处理程序成为当前进程的一部分，代表当前进程在运行。CS:EIP 的值就是IDT表中第$i$项门描述符的段选择符和偏移量的值，此时，CPU就跳转到了中断或异常处理程序。</p><p>中断或异常被处理完后，相应的处理程序必须产生一条<code>iret</code>指令，把控制权转交给被中断的进程，这将迫使控制单元：</p><ol><li>用保存在栈中的值装载<code>cs</code>、<code>eip</code>或<code>eflags</code>寄存器。如果一个硬件出错码曾被压入栈中，并且在<code>eip</code>内容的上面，那么，执行<code>iret</code>指令前必须先弹出这个硬件出错码。</li><li>检查处理程序的<code>CPL</code>是否等于<code>cs</code>中最低两位的值（这意味着被中断的进程与处理程序运行在同一特权级）。如果是，<code>iret</code> 终止执行；否则，转入下一步。</li><li>从栈中装载<code>ss</code>和<code>esp</code>寄存器，因此，返回到与旧特权级相关的栈。</li><li>检查<code>ds</code>、<code>es</code>、<code>fs</code>及<code>gs</code>段寄存器的内容，如果其中一个寄存器包含的选择符是一个段描述符，并且其DPL值小于CPL，那么，清空相应的段寄存器。控制单元这么做是为了禁止用户态的程序（CPL=3）利用内核以前所用的段寄存器（DPL=0）。如果不清这些寄存器，怀有恶意的用户态程序就可能利用它们来访问内核地址空间。</li></ol><img src="/2019/11/operating-system-question-list-2/无特权级变换.png" title="无特权级变换"><img src="/2019/11/operating-system-question-list-2/有特权级变换.png" title="有特权级变换">]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OperatingSystem </tag>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统问题归档</title>
      <link href="/2019/11/operating-system-question-list-1/"/>
      <url>/2019/11/operating-system-question-list-1/</url>
      
        <content type="html"><![CDATA[<p>操作系统部分问答题归档整理-Part 1</p><a id="more"></a><h2 id="1-什么是实模式，什么是保护模式？"><a href="#1-什么是实模式，什么是保护模式？" class="headerlink" title="1. 什么是实模式，什么是保护模式？"></a>1. 什么是实模式，什么是保护模式？</h2><ol><li><p>实模式就是用基地址加偏移量就可以直接拿到物理地址的模式。</p><ul><li>缺点：实模式非常不安全。</li></ul></li><li><p>保护模式就是不能直接拿到物理地址的模式。</p><ul><li>需要进行地址转换</li><li>从80386开始，是现代操作系统的主要模式</li></ul></li></ol><h2 id="2-什么是选择子？"><a href="#2-什么是选择子？" class="headerlink" title="2. 什么是选择子？"></a>2. 什么是选择子？</h2><ol><li>选择子共16位，放在段选择寄存器里</li><li>低2位表示请求特权级</li><li>第3位表示选择GDT方式还是LDT方式</li><li>高13位表示在描述符表中的偏移（故描述符表的项数最多是2的13次方）</li></ol><h2 id="3-什么是描述符？"><a href="#3-什么是描述符？" class="headerlink" title="3. 什么是描述符？"></a>3. 什么是描述符？</h2><p>保护模式下引入描述符来描述各种数据段，所有的描述符均为8个字节（0-7），由第5个字节说明描述符的类型。类型不同，描述符的结构也有所不同。</p><h2 id="4-什么是GDT，什么是LDT"><a href="#4-什么是GDT，什么是LDT" class="headerlink" title="4. 什么是GDT，什么是LDT?"></a>4. 什么是GDT，什么是LDT?</h2><ol><li>GDT：全局描述符表，是全局唯一的。存放一些公用的描述符、和包含各进程局部描述符表首地址的描述符。</li><li>LDT：局部描述符表，每个进程都可以有一个。存放本进程内使用的描述符。</li></ol><h2 id="5-请分别说明GDTR和LDTR的结构。"><a href="#5-请分别说明GDTR和LDTR的结构。" class="headerlink" title="5. 请分别说明GDTR和LDTR的结构。"></a>5. 请分别说明GDTR和LDTR的结构。</h2><ol><li>GDTR：48位寄存器，高32位放置GDT首地址，低16位放置GDT限长（限长决定了可寻址的大小，注意低16位放的不是选择子）</li><li>LDTR：16位寄存器，放置一个特殊的选择子，用于查找当前进程的LDT首地址。</li></ol><h2 id="6-请说明GDT直接查找物理地址的具体步骤。"><a href="#6-请说明GDT直接查找物理地址的具体步骤。" class="headerlink" title="6. 请说明GDT直接查找物理地址的具体步骤。"></a>6. 请说明GDT直接查找物理地址的具体步骤。</h2><ol><li><p>给出段选择子（放在段选择寄存器里）+偏移量</p></li><li><p>若选择了GDT方式，则从GDTR获取GDT首地址，用段选择子中的13位做偏移，拿到GDT中的描述符</p></li><li><p>如果合法且有权限，用描述符中的段首地址加上（1）中的偏移量找到物理地址。寻址结束。</p></li></ol><img src="/2019/11/operating-system-question-list-1/GDT.png" title="GDT"><h2 id="7-请说明通过LDT查找物理地址的具体步骤。"><a href="#7-请说明通过LDT查找物理地址的具体步骤。" class="headerlink" title="7. 请说明通过LDT查找物理地址的具体步骤。"></a>7. 请说明通过LDT查找物理地址的具体步骤。</h2><ol><li>给出段选择子（放在段选择寄存器中）+偏移量</li><li>若选择了LDT方式，则从GDTR获取GDT首地址，用LDTR中的偏移量做偏移，拿到GDT中的描述符1</li><li>从描述符1中获取LDT首地址，用段选择子中的13位做偏移，拿到LDT中的描述符2</li><li>如果合法且有权限，用描述符2中的段首地址加上（1）中的偏移量找到物理地址。寻址结束。</li></ol><img src="/2019/11/operating-system-question-list-1/LDT.png" title="LDT"><h2 id="8-根目录区大小一定么？扇区号是多少？为什么？"><a href="#8-根目录区大小一定么？扇区号是多少？为什么？" class="headerlink" title="8. 根目录区大小一定么？扇区号是多少？为什么？"></a>8. 根目录区大小一定么？扇区号是多少？为什么？</h2><p>不一定。FAT12中一般从第19扇区开始。引导扇区占1扇区，2个FAT表各占9扇区，故根目录区从19扇区开始。</p><p>根目录区大小根据引导扇区中根目录区文件数的最大值<code>BPB_RootEntCnt</code>而定。</p><h2 id="9-数据区第一个簇号是多少？为什么？"><a href="#9-数据区第一个簇号是多少？为什么？" class="headerlink" title="9. 数据区第一个簇号是多少？为什么？"></a>9. 数据区第一个簇号是多少？为什么？</h2><p>2号簇。0号和1号簇被系统保留并存储特殊标识内容。0号FAT表项通常用来存放分区所在的介质类型；1号FAT表项用来存储文件系统的肮脏标志，表明文件系统被非法卸载或者磁盘表面存在错误 。</p><p>本来序号为0和1的FAT表项应该对应于簇0和簇1，但是由于这两个表项被设置成了固定值，簇0和簇1就没有存在的意义了，所以数据区就起始于簇2。</p><h2 id="10-FAT表的作用？"><a href="#10-FAT表的作用？" class="headerlink" title="10. FAT表的作用？"></a>10. FAT表的作用？</h2><p>文件分配表被划分为紧密排列的若干个表项，每个表项都与数据区中的一个簇相对应，而且表项的序号也是与簇号一一对应的。FAT项的值代表文件的下一个簇号：</p><ul><li><p>值大于或等于0xFF8，表示当前簇已经是本文件的最后一个簇</p></li><li><p>值为0xFF7，表示它是一个坏簇</p></li></ul><h2 id="11-解释静态链接的过程。"><a href="#11-解释静态链接的过程。" class="headerlink" title="11. 解释静态链接的过程。"></a>11. 解释静态链接的过程。</h2><p>静态链接就是在编译链接时直接将需要的执行代码拷贝到调用处。</p><p>静态链接的主要目的就是将多个目标文件合并，并处理各目标文件用到的外部符号，对外部符号重定位（调整地址），使程序能够正常执行。静态链接一般采用两步链接的方法。</p><p><strong>第一步，空间与地址分配。</strong>扫描所有的输入目标文件，获得它们的各个段的长度、属性和位置，并且将输入目标文件中的符号表中所有的符号定义和符号引用收集起来，统一放到一个全局符号表。连接器获取所有输入目标文件的段长度后，将它们合并。</p><p><strong>第二步，符号解析与重定位。</strong>使用上一步收集到的所有信息，读取输入目标文件中段的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。</p><h2 id="12-解释动态链接的过程。"><a href="#12-解释动态链接的过程。" class="headerlink" title="12. 解释动态链接的过程。"></a>12. 解释动态链接的过程。</h2><p>使用这种方式的程序并不在一开始就完成动态链接，而是直到真正调用动态库代码时，载入程序才计算(被调用的那部分)动态代码的逻辑地址。  </p><p>关于静态链接和动态链接，参见：<a href="https://www.polarxiong.com/archives/静态链接与动态链接在链接过程和文件结构上的区别.html" target="_blank" rel="noopener">静态链接与动态链接在链接过程和文件结构上的区别</a></p><h2 id="13-静态链接相关PPT中为什么使用ld链接⽽不是gcc"><a href="#13-静态链接相关PPT中为什么使用ld链接⽽不是gcc" class="headerlink" title="13. 静态链接相关PPT中为什么使用ld链接⽽不是gcc"></a>13. 静态链接相关PPT中为什么使用<code>ld</code>链接⽽不是<code>gcc</code></h2><p>因为没有依赖其他库，不需要<code>gcc</code>来告诉<code>ld</code>需要加入哪些依赖并调用<code>ld</code>，可直接调用<code>ld</code>。</p><p>在实际自己操作的时候用<code>ld</code>链接发生了报错，用<code>objdump -rd</code>命令查看<code>test.o</code>，发现<code>gcc</code>在编译过程中在里面加了一个函数<code>__stack_chk_fail</code>，查阅发现应该是<code>gcc</code>添加用于保护数组的(?)，在用<code>ld</code>命令链接时<code>ld</code>找不到该函数而出现问题，改用<code>gcc</code>后问题消除。</p><h2 id="14-Linux下可执行文件的虚拟地址空间默认从哪里开始分配。"><a href="#14-Linux下可执行文件的虚拟地址空间默认从哪里开始分配。" class="headerlink" title="14. Linux下可执行文件的虚拟地址空间默认从哪里开始分配。"></a>14. Linux下可执行文件的虚拟地址空间默认从哪里开始分配。</h2><blockquote><p>32位Linux： 0x08048000</p><p>64位Linux： 0x00400000</p></blockquote><h2 id="15-BPB指定字段的含义"><a href="#15-BPB指定字段的含义" class="headerlink" title="15. BPB指定字段的含义"></a>15. BPB指定字段的含义</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BPB_BytsPerSec：每个扇区的字节数。</span></span><br><span class="line"><span class="keyword">BPB_SecPerClus：每一簇的扇区数。</span></span><br><span class="line"><span class="keyword">BPB_RsvdSecCnt：保留区的扇区数。（BOOT区）</span></span><br><span class="line"><span class="keyword">BPB_NumFATs：FAT表的个数。</span></span><br><span class="line"><span class="keyword">BPB_RootEntCnt：此字段指示根目录中32字节目录条目的数量。</span></span><br><span class="line"><span class="keyword">BPB_TotSec16：总扇区数，在FAT12下，当扇区总数大于0xFFFF时，该值置为0，真实值由BPB_TotSec32指定。</span></span><br><span class="line"><span class="keyword">BPB_Media：略。</span></span><br><span class="line"><span class="keyword">BPB_FATSz16：一个FAT表所占的扇区数。</span></span><br><span class="line"><span class="keyword">BPB_SecPerTrk：每个磁道的扇区数。</span></span><br><span class="line"><span class="keyword">BPB_NumHeads：略。</span></span><br><span class="line"><span class="keyword">BPB_HiddSec：隐藏扇区数。</span></span><br><span class="line"><span class="keyword">BPB_TotSec32：总扇区数。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OperatingSystem </tag>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大转移</title>
      <link href="/2019/09/hexo-next/"/>
      <url>/2019/09/hexo-next/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">至高无上的皇帝陛下于今日抵达自己忠实的巴黎 。</blockquote><p>我于今日把博客从WordPress迁移到了Hexo。</p><p>虽然本来也就只有一篇HelloWorld。</p><a id="more"></a><p>其实还没有完全完工，昨天晚上心心念念想着嵌入一个全局的音乐播放器组件，今天用<code>pjax</code>操作了一下，大概算是完成了一小半。<del>让人不禁想问真的有必要吗。</del></p><p>在配置好<code>pjax</code>后，NexT主题原有的<code>document.ready()</code>函数下进行的初始动画和按键监听的绑定都不能正常运作了，改天再重写吧。</p><p><del>鸽之。</del></p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/2019/09/hello-world/"/>
      <url>/2019/09/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>七月初说要搭个博客以后，摸了2个月了。  </p><p>最初灵感大发，想要从头到尾每一行代码都自己写，搭建一个纯静态网页构成的博客，也和大佬讨论过实现细节，最后还是因为各种各样的原因不了了之了，其实还是因为懒吧。  </p><p>现在只能自我安慰有个可以用于记录自己学习和各种奇怪想法的地方就好了（但是之前的微信公众号也没更新啊），WordPress也没啥不好的。  </p><p>那么，这个博客就此起航了。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyMind </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
